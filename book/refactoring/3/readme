코드에서 나는 악취

1. 기이한 이름
  코드는 단순하고 명료하게 작성해야 한다.
  코드를 명료하게 표현하는 데 가장 중요한 요소 하나는 이름이다.
  함수, 모듈, 변수, 클래스 등은 그 이름만 보고도 각각이 무슨 일을 하고 어떻게 사용해야 하는지 명확히 알 수 있도록 신경 써서 지어야한다.
  하지만, 이름 짓기는 프로그래밍에서 가장 어려운 부분 중 하나이기도 하다.
  이름만 잘 지어도 나중에 문맥을 파악하느라 헤매는 시간을 크게 절약할 수 있다.
  마땅한 이름이 떠오르지 않는다면 설계에 더 근본적인 문제가 숨어 있을 가능성이 높다.

2. 중복 코드
  똑같은 코드 구조가 여러 곳에서 반복된다면 하나로 통합하여 더 나은 프로그램을 만들 수 있다.

3. 긴 함수
  오랜 기간 잘 활용되는 프로그램들은 하나같이 짧은 함수로 구성됐다.
  짧은 함수들로 구성된 코드베이스를 얼핏 훑으면 연산하는 부분이 하나도 없어 보인다.
  코드가 끝없이 위임하는 방식으로 작성되어 있기 때문이다.
  코드를 이해하고, 공유하고, 선택하기 쉬워진다는 장점은 함수를 짧게 구성할 때 나오는 것이다.
  짧은 함수로 구성된 코드를 이해하기 쉽게 만드는 가장 확실한 방법은 좋은 이름이다.
  함수 이름을 잘 지어두면 본문 코드를 볼 이유가 사라진다.(그러기 위해서는 더 적극적으로 함수를 쪼개야 한다.)
  주석을 달아야 할 만한 부분은 무조건 함수로 만든다.

4. 긴 매개변수 목록
  매개변수 목록이 길어지면 그 자체로 이해하기 어려울 때가 많다.
  사용 중인 데이터 구조에서 값들을 뽑아 각각을 별개의 매개변수로 전달하는 코드라면 객체 통째로 넘기기를 적용해서 원본 데이터 구조를 그대로 전달한다.
  클래스는 매개변수 목록을 줄이는 데 효과적은 수단이기도 하다.
  특히 여러 개의 함수가 특정 매개변수들의 값을 공통으로 사용할 때 유용하다.

5. 전역 데이터

6. 가변 데이터
  데이터를 변경했더니 예상치 못한 결과나 골치 아픈 버그로 이어지는 경우가 종종 있다.
  이런 이유로 함수형 프로그래밍에서는 데이터는 전대 변하지 않고, 데이터를 변경하려면 반드시(원래 데이터는 그대로 둔 채) 변경하려는 값에 해당하는 복사본을 만들어서 반환한다는 개념을 기본으로 삼고 있다.
  변수의 유효범위가 단 몇 줄뿐이라면 가변 데이터라 해도 문제를 일으킬 일이 별로 없다.
  하지만 나중에 유효범위가 넓어질 수 있고, 그러면 위험도 커진다.

7. 뒤엉킨 변경

8. 산탄총 수술

9. 기능 편애
  프로그램을 모듈화할 때는 코드를 여러 영역으로 나눈 뒤,
  영역 안에서 이뤄지는 상호작용은 최대한 늘리고,
  영역 사이에서 이뤄지는 상호작용은 최소로 줄이는 데 주력한다.
  기능 편애는 흔히 어떤 함수가 자기가 속한 모듈의 함수나 데이터보다,
  다른 모듈의 함수나 데이터와 상호작용 할 일이 더 많은 경우를 의미한다.

10. 데이터 뭉치
  데이터 항목들은 서로 어울려 노는 걸 좋아한다.
  데이터 항목 서너 개가 여러 곳에서 항상 함께 뭉쳐 다니는 모습을 흔히 목격할 수 있다.
  이렇게 몰려다니는 데이터 뭉치는 보금자리를 따로 마련해주는게 좋다.
  필드 형태의 데이터 뭉치는 클래스 추출하기로 하나의 객체로 묶는다.
  매서드 시그니처에 있는 데이터 뭉치는 매개변수 객체 만들기나 객체 통으로 넘기기를 적용해 매개변수 수를 줄여볼 수 있다.
  

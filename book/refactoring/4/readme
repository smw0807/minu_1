테스트 구축하기

리팩터링은 분명 가치있는 도구지만, 그것만으로는 부족하다.
리팩터링을 제대로 하려면 불가피하게 저지르는 실수를 잡아주는 견고한 테스트 스위트(test suite)가 뒷받침돼야 한다.
리팩터링을 하지 않더라도 좋은 테스트를 작성하는 일은 개발 효율을 높여준다.

자가 테스트코드의 가치.
테스트를 자주 수행하는 습관도 버그를 찾는 데 큰 도움이 된다.
테스트를 작성하려면 소프트웨어 제폼 본체 외의 부가적인 코드를 상당량 작성해야 한다.
테스트가 실제로 프로그래밍 속도를 높여주는 경험을 직접 해보지 않고서는 자가 테스트의 진가를 납득하긴 어렵다.
테스트 작성법을 배운 적이 없는 프로그래머가 대다수이다.
테스트를 작성하기 가장 좋은 시점은 프로그래밍을 시작하기 전이다.
테스트를 작성하다보면 원하는 기능을 추가하기 위해 무엇이 필요한지 고민하게 된다.
구현보다 인터페이스에 집중하게 된다는 장점도 있다.
테스트를 모두 통과한 시점이 바로 코드를 완성한 시점이다.

TDD(test-driven development) 테스트 주도 개발
(처음에는 통과하지 못할) 테스트를 작성하고,
이 테스트를 통과하게끔 코드를 작성하고,
결과 코드를 최대한 깔끔하게 리팩터링하는 과정을 짧은 주기로 반복한다.
테스트-코딩-리팩터링

코드는 성격에 따라 분리하는 것이 좋다.

// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var AnotherMessage = exports.AnotherMessage = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var SimpleMessage = exports.SimpleMessage = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Map_string_string = exports.Map_string_string = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineAnotherMessage()
defineSimpleMessage()
defineMap_string_string()

function defineAnotherMessage () {
  AnotherMessage.encodingLength = encodingLength
  AnotherMessage.encode = encode
  AnotherMessage.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.name)) {
      var len = encodings.string.encodingLength(obj.name)
      length += 1 + len
    }
    if (defined(obj.num64)) {
      var len = encodings.int64.encodingLength(obj.num64)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.name)) {
      buf[offset++] = 10
      encodings.string.encode(obj.name, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.num64)) {
      buf[offset++] = 16
      encodings.int64.encode(obj.num64, buf, offset)
      offset += encodings.int64.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      name: "",
      num64: 0
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.name = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 2:
        obj.num64 = encodings.int64.decode(buf, offset)
        offset += encodings.int64.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineSimpleMessage () {
  SimpleMessage.Type = {
    Ping: 0,
    Urgent: 1
  }

  SimpleMessage.encodingLength = encodingLength
  SimpleMessage.encode = encode
  SimpleMessage.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.name)) {
      var len = encodings.string.encodingLength(obj.name)
      length += 1 + len
    }
    if (defined(obj.num64)) {
      var len = encodings.int64.encodingLength(obj.num64)
      length += 1 + len
    }
    if (defined(obj.float64)) {
      var len = encodings.double.encodingLength(obj.float64)
      length += 1 + len
    }
    if (defined(obj.uuid)) {
      var len = encodings.bytes.encodingLength(obj.uuid)
      length += 1 + len
    }
    if (defined(obj.type)) {
      var len = encodings.enum.encodingLength(obj.type)
      length += 1 + len
    }
    if (defined(obj.name_list)) {
      for (var i = 0; i < obj.name_list.length; i++) {
        if (!defined(obj.name_list[i])) continue
        var len = encodings.string.encodingLength(obj.name_list[i])
        length += 1 + len
      }
    }
    if (defined(obj.num64_list)) {
      for (var i = 0; i < obj.num64_list.length; i++) {
        if (!defined(obj.num64_list[i])) continue
        var len = encodings.int64.encodingLength(obj.num64_list[i])
        length += 1 + len
      }
    }
    if (defined(obj.map_field)) {
      var tmp = Object.keys(obj.map_field)
      for (var i = 0; i < tmp.length; i++) {
        tmp[i] = {key: tmp[i], value: obj.map_field[tmp[i]]}
      }
      for (var i = 0; i < tmp.length; i++) {
        if (!defined(tmp[i])) continue
        var len = Map_string_string.encodingLength(tmp[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    if (defined(obj.another_msg)) {
      var len = AnotherMessage.encodingLength(obj.another_msg)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.another_msg2)) {
      for (var i = 0; i < obj.another_msg2.length; i++) {
        if (!defined(obj.another_msg2[i])) continue
        var len = AnotherMessage.encodingLength(obj.another_msg2[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.name)) {
      buf[offset++] = 10
      encodings.string.encode(obj.name, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.num64)) {
      buf[offset++] = 16
      encodings.int64.encode(obj.num64, buf, offset)
      offset += encodings.int64.encode.bytes
    }
    if (defined(obj.float64)) {
      buf[offset++] = 25
      encodings.double.encode(obj.float64, buf, offset)
      offset += encodings.double.encode.bytes
    }
    if (defined(obj.uuid)) {
      buf[offset++] = 34
      encodings.bytes.encode(obj.uuid, buf, offset)
      offset += encodings.bytes.encode.bytes
    }
    if (defined(obj.type)) {
      buf[offset++] = 40
      encodings.enum.encode(obj.type, buf, offset)
      offset += encodings.enum.encode.bytes
    }
    if (defined(obj.name_list)) {
      for (var i = 0; i < obj.name_list.length; i++) {
        if (!defined(obj.name_list[i])) continue
        buf[offset++] = 50
        encodings.string.encode(obj.name_list[i], buf, offset)
        offset += encodings.string.encode.bytes
      }
    }
    if (defined(obj.num64_list)) {
      for (var i = 0; i < obj.num64_list.length; i++) {
        if (!defined(obj.num64_list[i])) continue
        buf[offset++] = 56
        encodings.int64.encode(obj.num64_list[i], buf, offset)
        offset += encodings.int64.encode.bytes
      }
    }
    if (defined(obj.map_field)) {
      var tmp = Object.keys(obj.map_field)
      for (var i = 0; i < tmp.length; i++) {
        tmp[i] = {key: tmp[i], value: obj.map_field[tmp[i]]}
      }
      for (var i = 0; i < tmp.length; i++) {
        if (!defined(tmp[i])) continue
        buf[offset++] = 66
        varint.encode(Map_string_string.encodingLength(tmp[i]), buf, offset)
        offset += varint.encode.bytes
        Map_string_string.encode(tmp[i], buf, offset)
        offset += Map_string_string.encode.bytes
      }
    }
    if (defined(obj.another_msg)) {
      buf[offset++] = 74
      varint.encode(AnotherMessage.encodingLength(obj.another_msg), buf, offset)
      offset += varint.encode.bytes
      AnotherMessage.encode(obj.another_msg, buf, offset)
      offset += AnotherMessage.encode.bytes
    }
    if (defined(obj.another_msg2)) {
      for (var i = 0; i < obj.another_msg2.length; i++) {
        if (!defined(obj.another_msg2[i])) continue
        buf[offset++] = 82
        varint.encode(AnotherMessage.encodingLength(obj.another_msg2[i]), buf, offset)
        offset += varint.encode.bytes
        AnotherMessage.encode(obj.another_msg2[i], buf, offset)
        offset += AnotherMessage.encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      name: "",
      num64: 0,
      float64: 0,
      uuid: null,
      type: 0,
      name_list: [],
      num64_list: [],
      map_field: {},
      another_msg: null,
      another_msg2: []
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.name = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 2:
        obj.num64 = encodings.int64.decode(buf, offset)
        offset += encodings.int64.decode.bytes
        break
        case 3:
        obj.float64 = encodings.double.decode(buf, offset)
        offset += encodings.double.decode.bytes
        break
        case 4:
        obj.uuid = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        break
        case 5:
        obj.type = encodings.enum.decode(buf, offset)
        offset += encodings.enum.decode.bytes
        break
        case 6:
        obj.name_list.push(encodings.string.decode(buf, offset))
        offset += encodings.string.decode.bytes
        break
        case 7:
        obj.num64_list.push(encodings.int64.decode(buf, offset))
        offset += encodings.int64.decode.bytes
        break
        case 8:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tmp = Map_string_string.decode(buf, offset, offset + len)
        obj.map_field[tmp.key] = tmp.value
        offset += Map_string_string.decode.bytes
        break
        case 9:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.another_msg = AnotherMessage.decode(buf, offset, offset + len)
        offset += AnotherMessage.decode.bytes
        break
        case 10:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.another_msg2.push(AnotherMessage.decode(buf, offset, offset + len))
        offset += AnotherMessage.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineMap_string_string () {
  Map_string_string.encodingLength = encodingLength
  Map_string_string.encode = encode
  Map_string_string.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.key)) throw new Error("key is required")
    var len = encodings.string.encodingLength(obj.key)
    length += 1 + len
    if (defined(obj.value)) {
      var len = encodings.string.encodingLength(obj.value)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.key)) throw new Error("key is required")
    buf[offset++] = 10
    encodings.string.encode(obj.key, buf, offset)
    offset += encodings.string.encode.bytes
    if (defined(obj.value)) {
      buf[offset++] = 18
      encodings.string.encode(obj.value, buf, offset)
      offset += encodings.string.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      key: "",
      value: ""
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.key = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found0 = true
        break
        case 2:
        obj.value = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
